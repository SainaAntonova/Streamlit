import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import altair as alt
import datetime as dt


st.markdown(
    """
    <div style="background-color:#f0f0f0;padding:10px;border-radius:10px;">
        <h1 style="color:#333;text-align:center;">üçΩÔ∏è –ß–∞–µ–≤—ã–µ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ üçΩÔ∏è</h1>
    </div>
    """,
    unsafe_allow_html=True
)

path = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv'
#path = '../learning/datasets/tips.csv'
tips = pd.read_csv(path)
tips['time_order'] = pd.to_datetime(np.random.uniform(pd.to_datetime('2023-01-01').timestamp(),
                                                pd.to_datetime('2023-01-31').timestamp(),
                                                size=len(tips)), unit='s').date
tips['time_order'] = pd.to_datetime(tips['time_order'])
tips['weekend'] = tips.day.isin(['Sat','Sun'])
tips['weekend'] = tips['weekend'].astype(int)
tips['tip_percentage']= np.round(100*(tips['tip']/tips['total_bill']), 1)

st.write("""### –î–∞–Ω–Ω—ã–µ""")
st.write(tips)

st.title("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
# –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
option = st.sidebar.selectbox(
    '**–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫**:',  
    ('–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —á–∞–µ–≤—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞',
     '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–æ–≤',
     '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ —á–∞–µ–≤—ã—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞',
     '–í–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞, —á–∞–µ–≤—ã—Ö –∏ –ø–æ—Ä—Ü–∏–∏',
     '–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å—á–µ—Ç–∞',
     '–°—É–º–º–∞ —Å—á–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º',
     '–ß–∞–µ–≤—ã–µ –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω',
     '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
     '–í–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞ –∏ —á–∞–µ–≤—ã—Ö, —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫—É—Ä—è—â–∏–º/–Ω–µ–∫—É—Ä—è—â–∏–º'))

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
if option == '–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —á–∞–µ–≤—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞':
    tips_dynamics = tips.groupby('time_order')['tip'].mean().reset_index()
    fig = px.line(tips_dynamics, x='time_order', y='tip', markers=True, title='–î–∏–Ω–∞–º–∏–∫–∞ —á–∞–µ–≤—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
    fig.update_layout(
        xaxis_title='–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
        yaxis_title='–ß–∞–µ–≤—ã–µ',
        xaxis=dict(tickangle=45),
    )
    st.plotly_chart(fig)
    
    tips_dynamics['time_order_timestamp'] = tips_dynamics['time_order'].astype(int) // 10**9
    min_date = dt.datetime.fromtimestamp(tips_dynamics['time_order_timestamp'].min())
    max_date = dt.datetime.fromtimestamp(tips_dynamics['time_order_timestamp'].max())
    date_range = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç:", min_value=min_date, max_value=max_date, value=(min_date, max_date))
    
    

elif option == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–æ–≤':
    st.write('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–æ–≤')
    fig = px.histogram(tips, x='total_bill', nbins=20, labels={'total_bill': '–†–∞–∑–º–µ—Ä —Å—á–µ—Ç–∞ ($)', 'count': '–ß–∞—Å—Ç–æ—Ç–∞'})
    fig.update_traces(marker_line_color='black', marker_line_width=1)
    st.plotly_chart(fig)

elif option == '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ —á–∞–µ–≤—ã—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞':
    st.write('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ —á–∞–µ–≤—ã—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞')
    st.scatter_chart(data=tips, x='tip', y='total_bill')

elif option == '–í–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞, —á–∞–µ–≤—ã—Ö –∏ –ø–æ—Ä—Ü–∏–∏':
    st.write('–í–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞, —á–∞–µ–≤—ã—Ö –∏ –ø–æ—Ä—Ü–∏–∏')
    st.scatter_chart(data=tips, x='tip', y='total_bill', size='size')

elif option == '–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å—á–µ—Ç–∞':
    st.write('–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å—á–µ—Ç–∞')
    st.scatter_chart(data=tips, x='day', y='tip', color='sex')
    st.write('–í –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏. –û–±—â–µ–µ ')
    a=pd.DataFrame(tips['day'].value_counts())
    a.reset_index(inplace=True)
    fig = px.pie(data_frame=a, values='count', names='day', hole=0.3)
    st.plotly_chart(fig)

    male_tips = tips[tips['sex'] == 'Male']
    male_counts = male_tips['day'].value_counts().reset_index()
    male_counts.columns = ['day', 'count']
    fig_male = px.pie(male_counts, values='count', names='day', title='Pie Chart. –ú—É–∂—á–∏–Ω—ã', hole=0.3)
    st.plotly_chart(fig_male)

    female_tips = tips[tips['sex'] == 'Female']
    female_counts = female_tips['day'].value_counts().reset_index()
    female_counts.columns = ['day', 'count']
    fig_female = px.pie(female_counts, values='count', names='day', title='Pie Chart. –ñ–µ–Ω—â–∏–Ω—ã', hole=0.3)
    st.plotly_chart(fig_female)
    


elif option == '–°—É–º–º–∞ —Å—á–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º':
    st.write('–°—É–º–º–∞ —Å—á–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º')
    fig = px.box(tips, x='day', y='total_bill', color='time')
    st.plotly_chart(fig)

elif option == '–ß–∞–µ–≤—ã–µ –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω':
    option = st.sidebar.selectbox('**–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞**:',
                                  ('–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —á–∞–µ–≤—ã—Ö –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω', 
                                  '–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —á–∞–µ–≤—ã—Ö –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω'))
    if option == '–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —á–∞–µ–≤—ã—Ö –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω':
        st.write("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —á–∞–µ–≤—ã—Ö –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω")
        time_option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", ('–û–±–µ–¥', '–£–∂–∏–Ω'))
        filtered_tips = tips[(tips['time'] == ('Lunch' if time_option == '–û–±–µ–¥' else 'Dinner'))]
        fig, ax = plt.subplots()
        sns.histplot(data=filtered_tips, x='tip', bins=10, color='skyblue', ax=ax)
        ax.set_title(f'–ß–∞–µ–≤—ã–µ –∑–∞ {time_option.lower()}')
        ax.set_xlabel('–†–∞–∑–º–µ—Ä —á–∞–µ–≤—ã—Ö')
        ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        st.pyplot(fig)
    elif option == '–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —á–∞–µ–≤—ã—Ö –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω':
        st.write("–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —á–∞–µ–≤—ã—Ö –∑–∞ –æ–±–µ–¥ –∏ —É–∂–∏–Ω")
        fig=px.pie(tips, values='tip_percentage', names='time', hole=0.5)
        st.plotly_chart(fig)

elif option == '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö':
    st.write("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    numeric_columns = tips.select_dtypes(include='number')
    correlation_matrix = numeric_columns.corr().iloc[:, :9]
    correlation_df = correlation_matrix.stack().reset_index()
    correlation_df.columns = ['variable1', 'variable2', 'correlation']
    
    heatmap = alt.Chart(correlation_df).mark_rect().encode(
        x='variable1:O',
        y='variable2:O',
        color=alt.Color('correlation:Q', scale=alt.Scale(scheme='viridis'))
    ).properties(
         width=500,
        height=500
    ).configure_scale(
        bandPaddingInner=0.1
    )
    st.altair_chart(heatmap, use_container_width=True)

elif option == '–í–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞ –∏ —á–∞–µ–≤—ã—Ö, —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫—É—Ä—è—â–∏–º/–Ω–µ–∫—É—Ä—è—â–∏–º':
    st.write("–í–∑–∞–∏–º–æ—Å–≤—è–∑—å —Ä–∞–∑–º–µ—Ä–∞ —Å—á–µ—Ç–∞ –∏ —á–∞–µ–≤—ã—Ö, —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫—É—Ä—è—â–∏–º/–Ω–µ–∫—É—Ä—è—â–∏–º")
    option = st.sidebar.selectbox('**–í—ã–±–µ—Ä–∏—Ç–µ scatter-–≥—Ä–∞—Ñ–∏–∫**:',
                                  ('–î–ª—è –∂–µ–Ω—â–∏–Ω', 
                                  '–î–ª—è –º—É–∂—á–∏–Ω'))
    if option == ('–î–ª—è –∂–µ–Ω—â–∏–Ω'):
        data = tips[tips['sex'] == 'Female']
        st.scatter_chart(data=data, x='total_bill', y='tip', color='smoker')
    elif option == ('–î–ª—è –º—É–∂—á–∏–Ω'):
        data = tips[tips['sex'] == 'Male']
        st.scatter_chart(data=data, x='total_bill', y='tip', color='smoker')

cat_gif_url = 'https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif'
if st.button('ü•öüê∞ü•ö–ù–ê–ñ–ú–ò –ù–ê –ú–ï–ù–Øü•öüê∞ü•ö'): 
    st.image(cat_gif_url)